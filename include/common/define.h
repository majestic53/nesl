/**
 * NESL
 * Copyright (C) 2022 David Jolly
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute,
 * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef NESL_DEFINE_H_
#define NESL_DEFINE_H_

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define NESL_MAJOR 0
#define NESL_MINOR 1
#define NESL_PATCH 37

enum {
    NESL_BANK_RAM_CHARACTER = 0,
    NESL_BANK_RAM_PROGRAM,
    NESL_BANK_ROM_CHARACTER,
    NESL_BANK_ROM_PROGRAM,
    NESL_BANK_MAX,
};

enum {
    NESL_BUS_PROCESSOR = 0,
    NESL_BUS_VIDEO,
    NESL_BUS_VIDEO_OAM,
    NESL_BUS_MAX,
};

enum {
    NESL_BUTTON_A = 0,
    NESL_BUTTON_B,
    NESL_BUTTON_SELECT,
    NESL_BUTTON_START,
    NESL_BUTTON_UP,
    NESL_BUTTON_DOWN,
    NESL_BUTTON_LEFT,
    NESL_BUTTON_RIGHT,
    NESL_BUTTON_MAX,
};

enum {
    NESL_CONTROLLER_1 = 0,
    NESL_CONTROLLER_2,
    NESL_CONTROLLER_MAX,
};

enum {
    NESL_INSTRUCTION_ADC = 0,
    NESL_INSTRUCTION_AND,
    NESL_INSTRUCTION_ASL,
    NESL_INSTRUCTION_BCC,
    NESL_INSTRUCTION_BCS,
    NESL_INSTRUCTION_BEQ,
    NESL_INSTRUCTION_BIT,
    NESL_INSTRUCTION_BMI,
    NESL_INSTRUCTION_BNE,
    NESL_INSTRUCTION_BPL,
    NESL_INSTRUCTION_BRK,
    NESL_INSTRUCTION_BVC,
    NESL_INSTRUCTION_BVS,
    NESL_INSTRUCTION_CLC,
    NESL_INSTRUCTION_CLD,
    NESL_INSTRUCTION_CLI,
    NESL_INSTRUCTION_CLV,
    NESL_INSTRUCTION_CMP,
    NESL_INSTRUCTION_CPX,
    NESL_INSTRUCTION_CPY,
    NESL_INSTRUCTION_DEC,
    NESL_INSTRUCTION_DEX,
    NESL_INSTRUCTION_DEY,
    NESL_INSTRUCTION_EOR,
    NESL_INSTRUCTION_INC,
    NESL_INSTRUCTION_INX,
    NESL_INSTRUCTION_INY,
    NESL_INSTRUCTION_JMP,
    NESL_INSTRUCTION_JSR,
    NESL_INSTRUCTION_LDA,
    NESL_INSTRUCTION_LDX,
    NESL_INSTRUCTION_LDY,
    NESL_INSTRUCTION_LSR,
    NESL_INSTRUCTION_NOP,
    NESL_INSTRUCTION_ORA,
    NESL_INSTRUCTION_PHA,
    NESL_INSTRUCTION_PHP,
    NESL_INSTRUCTION_PLA,
    NESL_INSTRUCTION_PLP,
    NESL_INSTRUCTION_ROL,
    NESL_INSTRUCTION_ROR,
    NESL_INSTRUCTION_RTI,
    NESL_INSTRUCTION_RTS,
    NESL_INSTRUCTION_SBC,
    NESL_INSTRUCTION_SEC,
    NESL_INSTRUCTION_SED,
    NESL_INSTRUCTION_SEI,
    NESL_INSTRUCTION_STA,
    NESL_INSTRUCTION_STX,
    NESL_INSTRUCTION_STY,
    NESL_INSTRUCTION_TAX,
    NESL_INSTRUCTION_TAY,
    NESL_INSTRUCTION_TSX,
    NESL_INSTRUCTION_TXA,
    NESL_INSTRUCTION_TXS,
    NESL_INSTRUCTION_TYA,
    NESL_INSTRUCTION_XXX,
};

enum {
    NESL_INTERRUPT_RESET = 0,
    NESL_INTERRUPT_NON_MASKABLE,
    NESL_INTERRUPT_MASKABLE,
    NESL_INTERRUPT_MAPPER,
    NESL_INTERRUPT_MAX,
};

enum {
    NESL_MAPPER_0 = 0,
    NESL_MAPPER_1,
    NESL_MAPPER_2,
    NESL_MAPPER_3,
    NESL_MAPPER_4 = 4,
    NESL_MAPPER_30 = 30,
    NESL_MAPPER_66 = 66,
};

enum {
    NESL_MIRROR_HORIZONTAL = 0,
    NESL_MIRROR_VERTICAL,
    NESL_MIRROR_ONE_LOW,
    NESL_MIRROR_ONE_HIGH,
    NESL_MIRROR_MAX,
};

enum {
    NESL_OPERAND_ABSOLUTE = 0,
    NESL_OPERAND_ABSOLUTE_X,
    NESL_OPERAND_ABSOLUTE_Y,
    NESL_OPERAND_ACCUMULATOR,
    NESL_OPERAND_IMMEDIATE,
    NESL_OPERAND_IMPLIED,
    NESL_OPERAND_INDIRECT,
    NESL_OPERAND_INDIRECT_X,
    NESL_OPERAND_INDIRECT_Y,
    NESL_OPERAND_RELATIVE,
    NESL_OPERAND_ZEROPAGE,
    NESL_OPERAND_ZEROPAGE_X,
    NESL_OPERAND_ZEROPAGE_Y,
};

enum {
    NESL_OPERATION_ADD_CARRY = 0,
    NESL_OPERATION_COMPARE,
    NESL_OPERATION_DECREMENT,
    NESL_OPERATION_INCREMENT,
    NESL_OPERATION_LOGICAL_AND,
    NESL_OPERATION_LOGICAL_EXCLUSIVE_OR,
    NESL_OPERATION_LOGICAL_OR,
    NESL_OPERATION_ROTATE_LEFT,
    NESL_OPERATION_ROTATE_RIGHT,
    NESL_OPERATION_SHIFT_LEFT,
    NESL_OPERATION_SHIFT_RIGHT,
    NESL_OPERATION_TRANSFER,
};

typedef union {

    struct {
        uint8_t bit_0 : 1;
        uint8_t unused : 5;
        uint8_t bit_6 : 1;
        uint8_t bit_7 : 1;
    };

    struct {
        uint8_t low;
        uint8_t high;
    };

    uint16_t word;
} nesl_register_t;

#endif /* NESL_DEFINE_H_ */
